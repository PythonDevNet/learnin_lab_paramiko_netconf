#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Good resource to have https://github.com/CiscoDevNet/netconf-examples/tree/master/netconf-102
"""
import logging
from ncclient import manager
import sys
import xml.dom.minidom
import xmltodict
import json

HOST = '192.168.1.1'
PORT = 830
USER = 'admin'
PASS = ''

xmlns_dic = {
    'get_vlans': '''
        <vlans xmlns="http://pica8.com/xorplus/vlans">
           <vlan-id> </vlan-id>
           <voice-vlan> </voice-vlan>
        </vlans>
        '''
    ,
    'vlan-interface': '''
        <vlan-interface xmlns="http://pica8.com/xorplus/vlan-interface">
           <interface></interface>
        </vlan-interface>
        '''
    ,
    'lldp': '''
        <lldp xmlns="http://pica8.com/xorplus/lldp">
           <interface></interface>
        </lldp>
        '''
}


# create a main() method
def main():
    """Main method that prints NETCONF capabilities of remote device."""

    PASS = raw_input('password> ')

    with manager.connect(host=HOST, port=PORT, username=USER, password=PASS,
                         hostkey_verify=False, device_params={'name': 'default'},
                         look_for_keys=False, allow_agent=False) as m:

        # print all NETCONF capabilities
        with open('output/netconf_101_capability.txt', 'w') as file:
            for capability in m.server_capabilities:
                file.write(str(capability))
                file.write('\n')

        result_xmllist = []
        # run commands on the remote device
        for key in xmlns_dic.keys():
            data = m.get(('subtree', xmlns_dic[key]))
            result_xmllist.append(data)

        with open('output/netconf_101_rpc.xml', 'w') as file:
            file.write(str(result_xmllist))

        result_jsonlist = []
        for data in result_xmllist:
            # print all in xml
            print(data)

            # print all in json
            result_xml_str = repr(data)
            result_json_parsed_str = json.dumps(xmltodict.parse(result_xml_str))
            result_json_parsed_dict = json.loads(result_json_parsed_str)

            print(json.dumps(result_json_parsed_dict, indent=4, sort_keys=True))
            result_jsonlist.append(result_json_parsed_dict)

        with open('output/netconf_101_rpc.json', 'w') as file:
            json.dump(result_jsonlist, file, indent=4, sort_keys=True)


            # xml_doc = xml.dom.minidom.parseString(result.xml)
            # mac_address = xml_doc.getElementsByTagName("mod:mac_address")
            # print(mac_address)


if __name__ == '__main__':
    sys.exit(main())

